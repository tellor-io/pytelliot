{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Telliot's documentation \u00b6 Overview \u00b6 Telliot is a Python framework for interacting with the decentralized TellorX network. With Telliot, you (or your smart contract) can: Ask the TellorX Decentralized Oracle to answer a question (we call that tipping ) Submit answers to questions that other people (or smart contracts) ask. (we call that reporting . Reporters earn tips, but must stake TRB as collateral against incorrect answers) Look up historical answers. Help maintain the security of the TellorX network by disputing inaccurate answers and voting on other disputes. Of course, TellorX supports DeFi with questions such as \"What is the current price of Bitcoin in US Dollars?\" But that is just the beginning. TellorX also supports arbitrary questions and answers. Any question is OK, provided that the Tellor community can answer it with a reasonable degree of confidence (remember, Reporters may lose TRB if the network votes the answer incorrect!) Telliot Software \u00b6 The telliot software currently consists of two main python packages: Telliot Core This package provides core functionality and a plugin framework for use by other Telliot subpackages and custom data feeds. Telliot Feed Examples This package provides several working examples of data feeds that can be either customized or used directly. Scope \u00b6 Telliot aims to make it easier to ask questions in a format that the Oracle can understand, and specify the format (i.e. data structure) of the answers you would like to receive - so that the community can answer them more reliably. The TellorX network is open to everyone, and Telliot is just one way to access it. You can use all of Telliot, parts of it, or not use it at all. You can also make contributions to improve it. !!! warning Use Telliot at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Home"},{"location":"#welcome-to-telliots-documentation","text":"","title":"Welcome to Telliot's documentation"},{"location":"#overview","text":"Telliot is a Python framework for interacting with the decentralized TellorX network. With Telliot, you (or your smart contract) can: Ask the TellorX Decentralized Oracle to answer a question (we call that tipping ) Submit answers to questions that other people (or smart contracts) ask. (we call that reporting . Reporters earn tips, but must stake TRB as collateral against incorrect answers) Look up historical answers. Help maintain the security of the TellorX network by disputing inaccurate answers and voting on other disputes. Of course, TellorX supports DeFi with questions such as \"What is the current price of Bitcoin in US Dollars?\" But that is just the beginning. TellorX also supports arbitrary questions and answers. Any question is OK, provided that the Tellor community can answer it with a reasonable degree of confidence (remember, Reporters may lose TRB if the network votes the answer incorrect!)","title":"Overview"},{"location":"#telliot-software","text":"The telliot software currently consists of two main python packages: Telliot Core This package provides core functionality and a plugin framework for use by other Telliot subpackages and custom data feeds. Telliot Feed Examples This package provides several working examples of data feeds that can be either customized or used directly.","title":"Telliot Software"},{"location":"#scope","text":"Telliot aims to make it easier to ask questions in a format that the Oracle can understand, and specify the format (i.e. data structure) of the answers you would like to receive - so that the community can answer them more reliably. The TellorX network is open to everyone, and Telliot is just one way to access it. You can use all of Telliot, parts of it, or not use it at all. You can also make contributions to improve it. !!! warning Use Telliot at your own risk. It may have bugs! Bugs may cost you real money! If you find any, please submit an issue , or better yet create a pull request with a suggested fix.","title":"Scope"},{"location":"contributing/","text":"Contributing \u00b6 Development Environment Setup \u00b6 These instructions assume that a working Python interpreter (version >=3.9) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-core.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate If working on Ubuntu, may need to install one of the following packages ( see this issue ). sudo apt install libpython3.9-dev Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt Test Environment \u00b6 Make sure you've configured Telliot before continuing. Verify the development environment by running pytest and ensure that all tests pass. pytest Making Contributions \u00b6 Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-core channel in the community discord for updates. New Release Process/Checklist \u00b6 For manually creating a new package version release: Ensure all tests are passing on main. Remove \"dev\" from version in the main package's init .py . Example: version = \"0.0.5dev\" --> version = \"0.0.5\". On Github, go to Releases-->Draft a new release-->Choose a tag Write in a new tag that corresponds with the version in init .py. Example: v.0.0.5 If the tag is v.0.0.5, the release title should be Release 0.0.5. Click Auto-generate release notes. Check the box for This is a pre-release. Click Publish release. Navigate to the Actions tab from the main page of the package on github and make sure the release workflow completes successfully. Check to make sure the new version was released to test PyPI here . Test downloading and using the new version of the package from test PyPI ( example ). Navigate back to the pre-release you just made and click edit (the pencil icon). Uncheck the This is a pre-release box. Publish the release. Make sure the release github action goes through. Download and test the new release on PyPI official here . Change the package version in init .py to be the next development version. For example, if you just released version 0.0.5, change version to be \"0.0.6dev0\".","title":"Developer's Guide"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#development-environment-setup","text":"These instructions assume that a working Python interpreter (version >=3.9) is already installed on the system. Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-core.git Create and activate a virtual environment . In this example, the virtual environment is located in a subfolder called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate If working on Ubuntu, may need to install one of the following packages ( see this issue ). sudo apt install libpython3.9-dev Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt","title":"Development Environment Setup"},{"location":"contributing/#test-environment","text":"Make sure you've configured Telliot before continuing. Verify the development environment by running pytest and ensure that all tests pass. pytest","title":"Test Environment"},{"location":"contributing/#making-contributions","text":"Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-core channel in the community discord for updates.","title":"Making Contributions"},{"location":"contributing/#new-release-processchecklist","text":"For manually creating a new package version release: Ensure all tests are passing on main. Remove \"dev\" from version in the main package's init .py . Example: version = \"0.0.5dev\" --> version = \"0.0.5\". On Github, go to Releases-->Draft a new release-->Choose a tag Write in a new tag that corresponds with the version in init .py. Example: v.0.0.5 If the tag is v.0.0.5, the release title should be Release 0.0.5. Click Auto-generate release notes. Check the box for This is a pre-release. Click Publish release. Navigate to the Actions tab from the main page of the package on github and make sure the release workflow completes successfully. Check to make sure the new version was released to test PyPI here . Test downloading and using the new version of the package from test PyPI ( example ). Navigate back to the pre-release you just made and click edit (the pencil icon). Uncheck the This is a pre-release box. Publish the release. Make sure the release github action goes through. Download and test the new release on PyPI official here . Change the package version in init .py to be the next development version. For example, if you just released version 0.0.5, change version to be \"0.0.6dev0\".","title":"New Release Process/Checklist"},{"location":"documentation/","text":"Project Documentation \u00b6 Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve Documentation Reference \u00b6 Portions of the documentation are auto-generated from Python docstrings using: github.com/mkdocstrings/mkdocstrings Documentation for this package is available here: mkdocstrings.github.io/usage","title":"Documentation"},{"location":"documentation/#project-documentation","text":"Telliot is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Project Documentation"},{"location":"documentation/#documentation-reference","text":"Portions of the documentation are auto-generated from Python docstrings using: github.com/mkdocstrings/mkdocstrings Documentation for this package is available here: mkdocstrings.github.io/usage","title":"Documentation Reference"},{"location":"getting-started/","text":"Getting Started \u00b6 Telliot Configuration \u00b6 After installation of the telliot-core or any telliot data feeds, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder. To show the current configuration: telliot config show Main Configuration File \u00b6 The main configuration file allows you to choose the default network Telliot will interact with. By default, Telliot is configured to run on Rinkeby testnet, as shown in the example below. Edit the ~/telliot/main.yaml config file for the desired configuration. To run on Ethereum mainnet, use chain_id: 1 and network: mainnet . To submit values to the Tellor oracle, a private_key must also be configured. Example main configuration file: type : MainConfig loglevel : INFO chain_id : 4 Configure Accounts \u00b6 Telliot needs to know which accounts are available for contract writes, such as submitting values to the oracle. Use the command line to add necessary accounts/private keys. For example, to add an account called my-matic-acct for reporting on polygon mainnet (EVM chain_id=137): >> chained add my-matic-acct 0x57fe7105302229455bcfd58a8b531b532d7a2bb3b50e1026afa455cd332bf706 137 Enter encryption password for my-matic-acct: Confirm password: Added new account my-matic-acct (address= 0xcd19cf65af3a3aea1f44a7cb0257fc7455f245f0) for use on chains (137,) Note that reporting accounts can be used for ETH mainnet (chain_id=1), Rinkeby testnet (chain_id=4), or Polygon testnet (chain_id=80001). Also note that a single account/private key can be associated with multiple chains. Detailed instructions for managing EVM accounts can be found in the chained_accounts package documentation . Configure endpoints \u00b6 Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Ethereum mainnet and Rinkeby testnet. Warning All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io Add API Keys \u00b6 Some data sources used for reporting require you to set up an account and use an API key for authenticating requests. Edit ~/telliot/api_keys.yaml to add any API keys needed for reporting data like AMPL/USD/VWAP and BCT/USD. Example api_keys.yaml file: type : ApiKeyList api_keys : - type : ApiKey name : anyblock key : 'YOUR API KEY GOES HERE' url : https://api.anyblock.tools/ - type : ApiKey name : bravenewcoin key : 'YOUR API KEY GOES HERE' url : https://bravenewcoin.p.rapidapi.com/ ...","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#telliot-configuration","text":"After installation of the telliot-core or any telliot data feeds, Telliot must be personalized to use your own private keys and endpoints. First, create the default configuration files: telliot config init The default configuration files are created in a folder called telliot in the user home folder. To show the current configuration: telliot config show","title":"Telliot Configuration"},{"location":"getting-started/#main-configuration-file","text":"The main configuration file allows you to choose the default network Telliot will interact with. By default, Telliot is configured to run on Rinkeby testnet, as shown in the example below. Edit the ~/telliot/main.yaml config file for the desired configuration. To run on Ethereum mainnet, use chain_id: 1 and network: mainnet . To submit values to the Tellor oracle, a private_key must also be configured. Example main configuration file: type : MainConfig loglevel : INFO chain_id : 4","title":"Main Configuration File"},{"location":"getting-started/#configure-accounts","text":"Telliot needs to know which accounts are available for contract writes, such as submitting values to the oracle. Use the command line to add necessary accounts/private keys. For example, to add an account called my-matic-acct for reporting on polygon mainnet (EVM chain_id=137): >> chained add my-matic-acct 0x57fe7105302229455bcfd58a8b531b532d7a2bb3b50e1026afa455cd332bf706 137 Enter encryption password for my-matic-acct: Confirm password: Added new account my-matic-acct (address= 0xcd19cf65af3a3aea1f44a7cb0257fc7455f245f0) for use on chains (137,) Note that reporting accounts can be used for ETH mainnet (chain_id=1), Rinkeby testnet (chain_id=4), or Polygon testnet (chain_id=80001). Also note that a single account/private key can be associated with multiple chains. Detailed instructions for managing EVM accounts can be found in the chained_accounts package documentation .","title":"Configure Accounts"},{"location":"getting-started/#configure-endpoints","text":"Edit ~/telliot/endpoints.yaml to configure Telliot to use your own endpoints. If you don't have an endpoint, a free one is available at Infura.io . Simply replace INFURA_API_KEY with the one provided by Infura. Endpoints should be configured for both Ethereum mainnet and Rinkeby testnet. Warning All telliot software and reporter feeds should be validated on Rinkeby prior to deploying on mainnet. Note that endpoints must use the websocket protocol because HTTPS endpoints do not support event listeners. Example endpoints.yaml file: type : EndpointList endpoints : - type : RPCEndpoint chain_id : 1 network : mainnet provider : Infura url : wss://mainnet.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://etherscan.io - type : RPCEndpoint chain_id : 4 network : rinkeby provider : Infura url : wss://rinkeby.infura.io/ws/v3/{INFURA_API_KEY} explorer : https://rinkeby.etherscan.io","title":"Configure endpoints"},{"location":"getting-started/#add-api-keys","text":"Some data sources used for reporting require you to set up an account and use an API key for authenticating requests. Edit ~/telliot/api_keys.yaml to add any API keys needed for reporting data like AMPL/USD/VWAP and BCT/USD. Example api_keys.yaml file: type : ApiKeyList api_keys : - type : ApiKey name : anyblock key : 'YOUR API KEY GOES HERE' url : https://api.anyblock.tools/ - type : ApiKey name : bravenewcoin key : 'YOUR API KEY GOES HERE' url : https://bravenewcoin.p.rapidapi.com/ ...","title":"Add API Keys"}]}