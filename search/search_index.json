{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DOCUMENTATION for general Tellor Protocol client software (telliot) setup, creating new datafeeds, adding spot prices, reporting values to oracles, and more has moved HERE .","title":"Home"},{"location":"add-chain/","text":"Support new chain \u00b6 Add chain ID & explorer URL to telliot_core.directory.ContractInfo.get_abi() Add chain ID & name to telliot_core.apps.core.NETWORKS Add chain info to telliot_core.model.chain.default_chains_list Add chain ID & gas/fee info retrieval to telliot_core.gas.legacy_gas.gas_station Add endpoint info to telliot_core.model.endpoints.default_endpoint_list Add deployed oracle contract and autopay info to telliot_core.data.contract_directory.json : add address for tellor360-autopay add address for tellor360-oracle add playground address for trb-token if testnet Follow steps to support a new chain in telliot-feeds","title":"Add New Chain"},{"location":"add-chain/#support-new-chain","text":"Add chain ID & explorer URL to telliot_core.directory.ContractInfo.get_abi() Add chain ID & name to telliot_core.apps.core.NETWORKS Add chain info to telliot_core.model.chain.default_chains_list Add chain ID & gas/fee info retrieval to telliot_core.gas.legacy_gas.gas_station Add endpoint info to telliot_core.model.endpoints.default_endpoint_list Add deployed oracle contract and autopay info to telliot_core.data.contract_directory.json : add address for tellor360-autopay add address for tellor360-oracle add playground address for trb-token if testnet Follow steps to support a new chain in telliot-feeds","title":"Support new chain"},{"location":"contributing/","text":"Contributing \u00b6 Development Environment Setup \u00b6 Prerequisites \u00b6 Python (version >=3.9 & <3.10) Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-core.git Create and activate a virtual environment in that cloned repo. In this example, the virtual environment is called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt Test Environment \u00b6 Make sure you've configured Telliot before continuing. Verify the development environment by running pytest and ensure that all tests pass. pytest Making Contributions \u00b6 Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-core channel in the community discord for updates. New Release Process/Checklist \u00b6 For manually creating a new package version release: Ensure all tests are passing on main. Remove \"dev\" from version in the main package's init .py . Example: version = \"0.0.5dev\" --> version = \"0.0.5\". On Github, go to Releases-->Draft a new release-->Choose a tag Write in a new tag that corresponds with the version in init .py. Example: v.0.0.5 If the tag is v.0.0.5, the release title should be Release 0.0.5. Click Auto-generate release notes. Check the box for This is a pre-release. Click Publish release. Navigate to the Actions tab from the main page of the package on github and make sure the release workflow completes successfully. Check to make sure the new version was released to test PyPI here . Test downloading and using the new version of the package from test PyPI ( example ). Navigate back to the pre-release you just made and click edit (the pencil icon). Uncheck the This is a pre-release box. Publish the release. Make sure the release github action goes through. Download and test the new release on PyPI official here . Change the package version in init .py to be the next development version. For example, if you just released version 0.0.5, change version to be \"0.0.6dev0\".","title":"Developer's Guide"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#development-environment-setup","text":"","title":"Development Environment Setup"},{"location":"contributing/#prerequisites","text":"Python (version >=3.9 & <3.10) Clone the repository to a local working directory: git clone https://github.com/tellor-io/telliot-core.git Create and activate a virtual environment in that cloned repo. In this example, the virtual environment is called tenv : Linux Windows python3 -m venv tenv source tenv/bin/activate py -m venv tenv tenv\\Scripts\\activate Install the project using using an editable installation . pip install -e . pip install -r requirements-dev.txt","title":"Prerequisites"},{"location":"contributing/#test-environment","text":"Make sure you've configured Telliot before continuing. Verify the development environment by running pytest and ensure that all tests pass. pytest","title":"Test Environment"},{"location":"contributing/#making-contributions","text":"Once your dev environment is set up, make desired changes, create new tests for those changes, and conform to the style & typing format of the project. To do so, in the project home directory: Run all unit tests: pytest Check code typing: tox -e typing Check style (you may need run this step several times): tox -e style Once all those pass, you're ready to make a pull request to the project's main branch. Link any related issues, tag desired reviewers, and watch the #telliot-core channel in the community discord for updates.","title":"Making Contributions"},{"location":"contributing/#new-release-processchecklist","text":"For manually creating a new package version release: Ensure all tests are passing on main. Remove \"dev\" from version in the main package's init .py . Example: version = \"0.0.5dev\" --> version = \"0.0.5\". On Github, go to Releases-->Draft a new release-->Choose a tag Write in a new tag that corresponds with the version in init .py. Example: v.0.0.5 If the tag is v.0.0.5, the release title should be Release 0.0.5. Click Auto-generate release notes. Check the box for This is a pre-release. Click Publish release. Navigate to the Actions tab from the main page of the package on github and make sure the release workflow completes successfully. Check to make sure the new version was released to test PyPI here . Test downloading and using the new version of the package from test PyPI ( example ). Navigate back to the pre-release you just made and click edit (the pencil icon). Uncheck the This is a pre-release box. Publish the release. Make sure the release github action goes through. Download and test the new release on PyPI official here . Change the package version in init .py to be the next development version. For example, if you just released version 0.0.5, change version to be \"0.0.6dev0\".","title":"New Release Process/Checklist"},{"location":"documentation/","text":"Project Documentation \u00b6 Telliot Core is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve Documentation Reference \u00b6 Portions of the documentation are auto-generated from Python docstrings using: github.com/mkdocstrings/mkdocstrings Documentation for this package is available here: mkdocstrings.github.io/usage","title":"Documentation"},{"location":"documentation/#project-documentation","text":"Telliot Core is documented using Material for MkDocs . The latest telliot-core documentation can be found here To compile and view local changes to documentation, use the following command, then open a browser to the link displayed: mkdocs serve","title":"Project Documentation"},{"location":"documentation/#documentation-reference","text":"Portions of the documentation are auto-generated from Python docstrings using: github.com/mkdocstrings/mkdocstrings Documentation for this package is available here: mkdocstrings.github.io/usage","title":"Documentation Reference"}]}